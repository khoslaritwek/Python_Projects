# -*- coding: utf-8 -*-
"""SolutionToProblem1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_8ub_U9BUigmpsfKI24k34hS_hgNf-HQ
"""

####################################################################
#                        Coding conventions                        #
####################################################################
# Variables starts with small letter (like : var)                  #
# Function starts with Capital letters (like : Function() )        #
# File handles/ References will all be in caps when used           #
####################################################################

######################################################################
#             Solution Description                                   #
######################################################################
# multiply image and mask                                            #
# Thresholding values if an exceed 255 (not needed sorry!!)          #
# put all zero vals in red channel to 255                            #
######################################################################

#######################################################################
# Note : i will be using jupyter notebook but will provide the code   #
# /script along side                                                  #
# Thanks                                                              #
#######################################################################

## making Essential imports 
import matplotlib.pyplot as plt
import cv2
import numpy as np
import requests 
from google.colab import files

## uploading mask and raw image
files.upload()

inputImage = cv2.imread('./input.jpg')
maskImage = cv2.imread('./mask.png')

## lets check if image and mask has the same shape
print ('Shape of input:{}'.format(inputImage.shape))
print ('Shape of mask: {}'.format(maskImage.shape))

## As expected the image and mask does not confirm hence we shall resize the mask
inputXdims, inputYdims , _ = inputImage.shape
maskImage = cv2.resize(maskImage, (inputYdims, inputXdims))

## lets generate image 
generatedImage = inputImage  * np.array(maskImage / 255, dtype='uint8')    # if you dont divide by 255 you will get all whites (got stuck here)
plt.imshow(GeneratedImage)

## Splitting our newly Generated image into its constituent channels
r, g, b = cv2.split(generatedImage)
## now what remaining is sets all zero values in Red channel to 255
r[r == 0 ] = 255

## replacing red channel of generated image with our required red channel
newGenImage  = cv2.merge((r, g, b))

plt.imshow(newGenImage)

###### plotting required plots
plt.figure(figsize=(10, 10))
plt.subplot(2, 2, 1)
plt.imshow(inputImage)

plt.subplot(2, 2, 2)
plt.imshow(maskImage)

plt.subplot(2, 2, 3)
plt.imshow(generatedImage)

plt.subplot(2, 2, 4)
plt.imshow(newGenImage)

plt.imsave('MyResult.jpg', newGenImage)