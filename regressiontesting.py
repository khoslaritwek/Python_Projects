# -*- coding: utf-8 -*-
"""RegressionTesting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gnxlkP9vn1XZR_0W_fZ_lWWkVaQ4eapF
"""

from google.colab import files
files.upload()

#!ls dataset
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np

import pandas as pd


## Loading dataset 
DataFrame = pd.read_csv('./dataset/train.csv')
TestFrame = pd.read_csv('./dataset/test.csv')
TestNames = np.array(TestFrame['Product_id'])
## preprocessing
DataFrame = DataFrame.fillna(method='ffill')
TestFrame = TestFrame.fillna(method='ffill')

## Prices and test labels
Prices = np.array(DataFrame['Selling_Price'], dtype = 'float32')


DataFrame.info()

featuresRequired  =     [ 'Stall_no', 'Market_Category', 'Loyalty_customer', 'Product_Category', 'Grade', 'Demand', 'Discount_avail', 'charges_1',
                           'charges_2 (%)', 'Minimum_price', 'Maximum_price']
featureNeedsMapping  = [ 'Loyalty_customer', 'Product_Category']


DataFrame = DataFrame[featuresRequired]
TestFrame = TestFrame[featuresRequired]

def mapperFunction():
  for mem in featureNeedsMapping:
    uniqueVals = set(DataFrame[mem])
    mp1 = {}
    
    i = 0
    for member in uniqueVals:
      mp1[member] = i
      i += 1
    
    DataFrame[mem] = DataFrame[mem].map(mp1)
    TestFrame[mem] = TestFrame[mem].map(mp1)

mapperFunction()

## Getting Testing and Training vectors
TrainVector = np.array(DataFrame[featuresRequired], dtype= 'float32')
TestVector = np.array(TestFrame[featuresRequired], dtype= 'float32')

## FeatureVectorScalling
stdSc = StandardScaler()
TrainVector = stdSc.fit_transform(TrainVector)
TestVector = stdSc.transform(TestVector)

## label scalling
MaxPrice = max(Prices)
Prices = Prices/MaxPrice

xtrain, xtest, ytrain, ytest = train_test_split(TrainVector, Prices, test_size = 0.05, random_state = 42)

from sklearn.ensemble import GradientBoostingRegressor
gbr = GradientBoostingRegressor()
gbr.fit(xtrain, ytrain)

from sklearn.ensemble import RandomForestRegressor
rfr = RandomForestRegressor()
rfr.fit(xtrain, ytrain)

def AccuracyPlotter(trueLabels, predictedLabels):
  size = len(trueLabels)
  x_y = [0.00, 0.001, 0.002]


  
  plt.scatter(trueLabels, predictedLabels)
  #plt.plot(x_y)
  plt.show()

AccuracyPlotter(ytest, rfr.predict(xtest))

def Predictor(i = 0):
  PredictedPrices = (gbr.predict(TestVector) + rfr.predict(TestVector)) / 2
  PredictedPrices = PredictedPrices * MaxPrice
  PredictedPrices[ PredictedPrices < 0] = 0

  Frame = {'Product_id' : TestNames,
           'Selling_Price' : PredictedPrices }

  Frame = pd.DataFrame(Frame)
  Frame.to_csv(str(i) + '.csv', index = False)

Predictor('submission5')